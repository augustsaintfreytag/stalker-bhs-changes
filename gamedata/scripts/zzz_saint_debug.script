local item_properties = {
	"tier",
	"cost",
	"inv_weight",
	"inv_empty_weight",
	"max_uses",
	"eat_satiety",
	"eat_thirstiness",
	"eat_alcohol",
	"eat_sleepiness",
	"boost_time",
	"boost_max_weight",
	"boost_health_restore",
	"boost_power_restore",
	"boost_radiation_restore",
	"boost_bleeding_restore",
	"boost_radiation_protection",
	"boost_telepat_protection",
	"boost_chemburn_protection",
	"boost_burn_immunity",
	"boost_shock_immunity",
	"boost_radiation_immunity",
	"boost_telepat_immunity",
	"boost_chemburn_immunity",
	"boost_strike_immunity",
	"boost_wound_immunity",
	"boost_explosion_immunity",
	"boost_fire_wound_immunity"
}

local item_effect_properties_designations = {
	-- ["eat_satiety"] = "Satiety",
	-- ["eat_thirstiness"] = "Thirst",
	-- ["eat_alcohol"] = "Alcohol",
	-- ["eat_sleepiness"] = "Sleepiness",
	["boost_max_weight"] = "Carry Weight",
	["boost_health_restore"] = "Health Restore",
	["boost_power_restore"] = "Power Restore",
	["boost_radiation_restore"] = "Radiation Restore",
	["boost_bleeding_restore"] = "Bleeding Restore",
	["boost_radiation_protection"] = "Radiation Protection",
	["boost_telepat_protection"] = "Psy Protection",
	["boost_chemburn_protection"] = "Toxic Protection",
	["boost_burn_immunity"] = "Fire Immunity",
	["boost_shock_immunity"] = "Electric Immunity",
	["boost_radiation_immunity"] = "Radiation Immunity",
	["boost_telepat_immunity"] = "Psy Immunity",
	["boost_chemburn_immunity"] = "Toxic Immunity",
	["boost_strike_immunity"] = "Strike Immunity",
	["boost_wound_immunity"] = "Wound Immunity",
	["boost_explosion_immunity"] = "Explosion Immunity",
	["boost_fire_wound_immunity"] = "Fire Immunity",
	["bhs_healonelist"] = "Limb Heal",
	["bhs_splintlist"] = "Limb Splint",
	["bhs_surgerylist"] = "Limb Surgery",
	["bhs_painkillerlist"] = "Painkiller"
}

function normalized_effect_value(property, value)
	-- local native_magnitude = utils_ui.stats_table[property] and utils_ui.stats_table[property].magnitude or 1
	-- local adjusted_value = value * native_magnitude
	local adjusted_value = math.abs(value)

	if property == "bhs_healonelist" then
		return value / 84
	elseif property == "bhs_splintlist" then
		return value
	elseif property == "bhs_surgerylist" then
		return value
	elseif property == "bhs_painkillerlist" then
		return value / 10
	end

	return adjusted_value
end

function get_sorted_effect_properties(section)
	local sorted_properties = {}

	for property, _ in pairs(item_effect_properties_designations) do
		local value = get_any_item_value(section, property)

		if not is_empty(value) then
			local normalized_value = normalized_effect_value(property, value)

			if normalized_value ~= 0 then
				table.insert(sorted_properties, { property, normalized_value })
			end
		end
	end

	sort_tuple_table(sorted_properties)

	local sorted_property_names = {}

	for _, property in ipairs(sorted_properties) do
		local property_key = property[1]
		-- local property_designation = item_effect_properties_designations[property_key]
		table.insert(sorted_property_names, property_key)
	end

	return sorted_property_names
end

function get_any_item_value(section, property)
	if string.match(property, "bhs_") then
		return get_bhs_item_value(section, property)
	end

	return get_regular_item_value(section, property)
end

function get_regular_item_value(section, property)
	return ini_sys:r_float_ex(section, property)
end

function get_bhs_item_value(section, property)
	-- if not zzz_player_injuries or not zzz_player_injuries.healonelist or not zzz_player_injuries.splintlist or not zzz_player_injuries.surgeryamount or not zzz_player_injuries.painkillerlist then
	-- 	return nil
	-- end

	if property == "bhs_healonelist" then
		if zzz_player_injuries.healonelist[section] then
			return zzz_player_injuries.healonelist[section].healamount
		else
			return nil
		end
	elseif property == "bhs_splintlist" then
		if zzz_player_injuries.splintlist[section] then
			return zzz_player_injuries.splintlist[section].splintamount
		else
			return nil
		end
	elseif property == "bhs_surgerylist" then
		if zzz_player_injuries.surgerylist[section] then
			return zzz_player_injuries.surgerylist[section].surgeryamount
		else
			return nil
		end
	elseif property == "bhs_painkillerlist" then
		if zzz_player_injuries.painkillerlist[section] then
			return zzz_player_injuries.painkillerlist[section].painkillerpower
		else
			return nil
		end
	end

	return nil
end

function print_medical_item_stats()
	local log_file = io.open("saint_item_data.md", "a")
	local number_of_items = 0

	ini_sys:section_for_each(function(section)
		-- Filter

		local section_class = ini_sys:r_string_ex(section, "class")
		local section_kind = ini_sys:r_string_ex(section, "kind")

		--if section_class ~= "II_FOOD" and section_kind ~= "i_medical" then
		if section_kind ~= "i_medical" or string.match(section, "mp_") or string.match(section, "_script") then
			return
		end

		-- Process

		local name_key = ini_sys:r_string_ex(section, "inv_name")
		local description_key = ini_sys:r_string_ex(section, "description")

		local localized_name = game.translate_string(name_key)
		local localized_description = game.translate_string(description_key)

		local significant_properties = get_sorted_effect_properties(section)
		local significant_properties_list = get_table_description(significant_properties, 3)

		local pairs = {}

		for _, property in ipairs(item_properties) do
			-- local value = ini_sys:r_string_ex(section, property)
			local value = get_regular_item_value(section, property)

			if value and value ~= 0 then
				table.insert(pairs, { property, value })
			end
		end

		for _, property in ipairs({ "bhs_healonelist", "bhs_splintlist", "bhs_surgerylist", "bhs_painkillerlist" }) do
			local value = get_bhs_item_value(section, property)

			if value and value ~= 0 then
				table.insert(pairs, { property, value })
			end
		end

		for _, property in ipairs({	"$spawn", "visual", "item_visual", "use_sound", "snd_on_take", "anm"}) do
			local value = ini_sys:r_string_ex(section, property)

			if value and value ~= "" then
				table.insert(pairs, { property, value })
			end
		end

		-- Output Formatting

		local lines = {}

		table.insert(lines, "## " .. localized_name)
		table.insert(lines, "")
		table.insert(lines, "| Property | Value |")
		table.insert(lines, "| ------- | ------- |")
		table.insert(lines, "| section | " .. section .. " |")
		table.insert(lines, "| localized_name | " .. localized_name .. " |")
		table.insert(lines, "| localized_description | " .. ellipsized_str(localized_description) .. " |")
		table.insert(lines, "| significants | " .. significant_properties_list .. " |")

		for _, pair in ipairs(pairs) do
			local property = pair[1]
			local value = pair[2]

			if (type(value) == "number") then
				value = formatted_float(value)
			end

			table.insert(lines, "| " .. property .. " | " .. value .. " |")
		end

		number_of_items = number_of_items + 1
		log_file:write("\n" .. table.concat(lines, "\n") .. "\n")
	end)

	log_file:write("\nMedical items found: " .. number_of_items .. " item(s)\n")
end

function is_empty(str)
	return str == nil or str == "" or str == "0" or str == "0.0"
end

function ellipsized_str(str)
	local max_length = 48

	if #str > max_length then
		return str:sub(1, max_length) .. "â€¦"
	end

	return str
end

-- Formats a floating point number to a string, allows up to 5 decimal places
-- but does not use decimals or zeros if not needed.
-- If the value can be cast to an integer, it is not formatted as a float.
function formatted_float(val)
	if val == math.floor(val) then
		return tostring(val)
	end

	local formatted = string.format("%.5f", val)

	-- Remove trailing zeros and decimal point if not needed.
	formatted = string.gsub(formatted, "%.?0+$", "")
	formatted = string.gsub(formatted, "%.$", "")

	return formatted
end

-- Sort a table of key/value tuple-like table values, e.g. `{{"a", 1}, {"b", 2}, {"c", 3}}`.
function sort_tuple_table(tbl)
	table.sort(tbl, function(a, b)
		return a[2] > b[2]
	end)
end

-- Creates a comma-separated list of the values of the given table.
-- If supplied, only describe the first `limit` elements.
function get_table_description(tbl, limit)
	local descriptions = {}

	for i, value in ipairs(tbl) do
		if limit and i > limit then
			break
		end

		table.insert(descriptions, tostring(value))
	end

	return table.concat(descriptions, ", ")
end

-- Event Hooks

function on_game_start()
	print_medical_item_stats()
end
