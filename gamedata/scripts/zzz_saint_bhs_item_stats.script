-- Modules

local gc = game.translate_string

-- Patches

bhs_max_limb_health = {}
bhs_max_limb_health_total = 1 -- Don't use default value 0 to prevent division by zero.
bhs_items_all_limb_restore = {}
bhs_items_sequential_limb_restore = {}
bhs_items_limb_splint = {}
bhs_items_surgical = {}
bhs_items_analgesic = {}

function apply_compatibility_patches()
	if not zzz_player_injuries or not zzz_player_injuries.healhelplist then
		-- BHS or other modules not available.
		return
	end

	bhs_max_limb_health = zzz_player_injuries.maxhp or {}
	bhs_max_limb_health_total = bhs_max_limb_health.head + bhs_max_limb_health.torso + bhs_max_limb_health.rightleg +
		bhs_max_limb_health.leftleg + bhs_max_limb_health.rightarm + bhs_max_limb_health.leftarm
	bhs_items_all_limb_restore = zzz_player_injuries.healhelplist or {}
	bhs_items_sequential_limb_restore = zzz_player_injuries.healonelist or {}
	bhs_items_limb_splint = zzz_player_injuries.splintlist or {}
	bhs_items_surgical = zzz_player_injuries.surgerylist or {}
	bhs_items_analgesic = zzz_player_injuries.painkillerlist or {}

	utils_ui.stats_table["booster"]["boost_health_restore"] = {
		index = 2,
		typ = "float",
		name = "ui_inv_health",
		icon_p = "ui_am_propery_05",
		icon_n = "",
		track = false,
		magnitude = 12500, -- 0.0004 should be 5% PAR/x,
		unit = "st_par_hour",
		compare = false,
		sign = true,
		show_always = false
	}

	utils_ui.stats_table["booster"]["boost_damage_immunity"] = {
		index = 3,
		typ = "float",
		name = "ui_inv_damage_immunity",
		icon_p = "ui_am_prop_damage_immunity",
		icon_n = "",
		track = false,
		magnitude = 1,
		unit = "",
		compare = false,
		sign = true,
		show_always = false,
		value_functor = { "zzz_saint_bhs_item_stats", "get_damage_immunity" }
	}

	utils_ui.stats_table["booster"]["boost_limb_splint"] = {
		index = 4,
		typ = "float",
		name = "ui_inv_limb_splint",
		icon_p = "ui_am_prop_limb_splint",
		icon_n = "",
		track = false,
		magnitude = 1,
		unit = "",
		compare = false,
		sign = false,
		show_always = false,
		value_functor = { "zzz_saint_bhs_item_stats", "get_limb_splint" }
	}

	utils_ui.stats_table["booster"]["boost_limb_restore"] = {
		index = 5,
		typ = "float",
		name = "ui_inv_limb_restore",
		icon_p = "ui_am_prop_limb_restore",
		icon_n = "",
		track = false,
		magnitude = 1,
		unit = "",
		compare = false,
		sign = false,
		show_always = false,
		value_functor = { "zzz_saint_bhs_item_stats", "get_limb_restore" }
	}

	utils_ui.stats_table["booster"]["boost_limb_surgery"] = {
		index = 6,
		typ = "float",
		name = "ui_inv_limb_surgery",
		icon_p = "ui_am_prop_limb_surgery",
		icon_n = "",
		track = false,
		magnitude = 1,
		unit = "",
		compare = false,
		sign = false,
		show_always = false,
		value_functor = { "zzz_saint_bhs_item_stats", "get_limb_surgery" }
	}

	utils_ui.stats_table["booster"]["eat_radiation"] = {
		index = 17,
		typ = "float",
		name = "ui_inv_radiation",
		icon_p = "ui_am_prop_radio_restore",
		icon_n = "ui_am_propery_09",
		track = false,
		magnitude = 3870,
		unit = "st_msv",
		compare = false,
		sign = true,
		show_always = false,
		sign_inverse_txt = false
	}

	utils_ui.stats_table["booster"]["eat_satiety"] = {
		index = 18,
		typ = "float",
		name = "ui_inv_satiety",
		icon_p = "ui_am_prop_satiety_restore_speed",
		icon_n = "ui_am_prop_satiety",
		track = false,
		magnitude = 1000,
		unit = "st_kcal",
		compare = false,
		sign = true,
		show_always = false
	}

	utils_ui.stats_table["booster"]["eat_thirstiness"] = {
		index = 19,
		typ = "float",
		name = "ui_inv_hydration",
		icon_p = "ui_am_prop_thirst_p",
		icon_n = "ui_am_prop_thirst_n",
		track = false,
		magnitude = 1000,
		unit = "st_ml",
		compare = false,
		sign = true,
		show_always = false,
		sign_inverse_txt = false
	}

	utils_ui.stats_table["booster"]["eat_sleepiness"] = {
		index = 20,
		typ = "float",
		name = "ui_inv_sleep",
		icon_p = "ui_am_prop_sleep_p",
		icon_n = "ui_am_prop_sleep_n",
		track = false,
		magnitude = 1000,
		unit = "st_perc",
		compare = false,
		sign = true,
		show_always = false
	}
end

-- Values & Descriptions

function get_damage_immunity(obj, sec)
	if not sec then sec = obj:section() end

	local effects = bhs_items_analgesic[sec] or {}
	local level = effects.painkillerpower

	if not level then
		return nil
	end

	-- local duration = math.ceil(effects.painkillerduration / 1000)
	local str = level .. " " .. gc("st_levels") .. " (" .. gc("ui_inv_suffix_effect_prolonged") .. ")"

	return str
end

function get_limb_splint(obj, sec)
	if not sec then sec = obj:section() end

	local effects = bhs_items_limb_splint[sec] or {}
	local amount = effects.splintamount

	if not amount then
		return nil
	end

	return gc("ui_inv_splint") .. " (" .. gc("ui_inv_splint_arms_legs") .. ")"
end

function get_limb_restore(obj, sec)
	if not sec then sec = obj:section() end

	local all_limb_effects = bhs_items_all_limb_restore[sec]
	local sequential_limb_effects = bhs_items_sequential_limb_restore[sec]

	-- 60 units total amount healed by base values, total limb health is 84 units
	local total_heal_power = 0
	local total_heal_duration = 0

	if all_limb_effects then
		local effects = all_limb_effects
		local total_heal_amount_head_and_torso = effects.head + effects.torso
		local total_heal_amount_limbs = effects.rightleg + effects.leftleg + effects.rightarm + effects.leftarm
		local total_heal_amount = total_heal_amount_head_and_torso + total_heal_amount_limbs

		total_heal_power = math.ceil(total_heal_amount / bhs_max_limb_health_total) * 100
		total_heal_duration = math.ceil(effects.healtimer / 1000)
	elseif sequential_limb_effects then
		local effects = sequential_limb_effects
		local total_heal_amount = effects.healamount

		total_heal_power = math.ceil(total_heal_amount / bhs_max_limb_health_total) * 100
		total_heal_duration = math.ceil(effects.healtimer / 1000)
	else
		return nil
	end

	local str = tostring(total_heal_power) .. "%"

	if all_limb_effects then
		str = str .. " (" .. gc("ui_inv_splint_all") .. ")"
	elseif sequential_limb_effects then
		str = str .. " (" .. gc("ui_inv_splint_sequential") .. ")"
	end

	return str
end

function get_limb_surgery(obj, sec)
	if not sec then sec = obj:section() end

	local effects = bhs_items_surgical[sec] or {}
	local amount = effects.surgeryamount

	if not amount then
		return nil
	end

	return gc("ui_inv_surgery") .. " (" .. gc("ui_inv_splint_all") .. ")"
end

-- Hooks

function hook_overrides()
	if not ish_item_stats or not ish_item_stats.apply_compatibility_patches then
		-- Module to be patched not available.
		return
	end

	local original_apply_compatibility_patches = ish_item_stats.apply_compatibility_patches

	ish_item_stats.apply_compatibility_patches = function()
		original_apply_compatibility_patches()
		apply_compatibility_patches()
	end
end

function on_game_start()
	hook_overrides()
end
