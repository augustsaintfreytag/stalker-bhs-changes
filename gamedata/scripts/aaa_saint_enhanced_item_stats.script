-- Saint's Utils UI Stats Enhanced

-- This function is taken from the original `utils_ui` script's `UIInfoItem` class,
-- modified to allow for both numeric values and preformatted strings to be used in
-- item stats rows. It also includes numeric formatting (e.g. 10.000) and time interval
-- formatting (e.g. 10 Seconds, 5 Minutes) with automatic conversion.

local clr_list = {
	["p1"]         = GetARGB(255, 170, 170, 170),
	["n1"]         = GetARGB(255, 200, 50, 50),
	["info_def"]   = GetARGB(200, 255, 255, 255),
	["info_p"]     = GetARGB(255, 56, 209, 115),
	["info_n"]     = GetARGB(255, 238, 28, 36),
	["info_p_txt"] = GetARGB(200, 100, 255, 100),
	["info_n_txt"] = GetARGB(200, 255, 100, 100),
}

function utils_ui.UIInfoItem:Update(obj, sec, flags)
	if not self:Pass(obj, sec) then
		self:Show(false)
		return
	end

	-- item info box is shown at cursor
	utils_xml.sync_cursor(self.dialog, self.frame, 0, 0)

	-- no need to process if it's same item
	if obj then
		if obj:id() == self.id then
			self:Show(true)
			return
		end
	elseif sec then
		if sec == self.section then
			self:Show(true)
			return
		end
	end

	-- gather basic info
	sec = obj and obj:section() or sec
	local section_type = self:GetType(sec)
	--printf("-updating | section [%s] - type: %s", sec, typ)

	self.id = obj and obj:id() or nil
	self.section = sec

	-- Name
	local name = obj and ui_item.get_obj_name(obj) or ui_item.get_sec_name(sec)
	self.name:SetText(name)

	-- Weight
	local weight = obj and obj:weight() or ini_sys:r_float_ex(sec, "inv_weight")
	self.weight:SetText(round_100(weight) .. " " .. game.translate_string("st_kg"))

	-- Cost
	if flags and flags.value_str and (not flags.note_str) then
		self.value:SetText(flags.value_str)
		self.value:Show(true)
	else
		self.value:Show(false)
	end

	-- Note
	if flags and flags.note_str then
		self.note:SetText(flags.note_str)
		self.note:Show(true)
	else
		self.note:Show(false)
	end

	-- Description
	local desc = obj and ui_item.get_obj_desc(obj) or ui_item.get_sec_desc(sec)

	self.desc:SetText(desc)
	self.desc:AdjustHeightToText()

	if self:Sync_Finale((not utils_ui.stats_table[section_type]), nil, self.desc, self.frame, 10) then
		self.stats_dialog:Show(false)
		self.ammo:Show(false)
		return
	end

	-- Stats
	for i = 1, #self.stats do
		self.stats[i].base:Show(false)
	end

	-- Comparison
	local obj_b
	if self.can_compare and obj then
		local slot = SYS_GetParam(2, sec, "slot", -1) + 1
		obj_b = slot > 0 and db.actor:item_in_slot(slot)
	end

	local value = utils_ui.stats_table[section_type]
	local cnt, y = 0, 0
	local cnt_last

	function val_is_empty(val)
		if val == nil then
			return true
		elseif type(val) == "number" and val == 0 then
			return true
		elseif type(val) == "string" and val == "" then
			return true
		end

		return false
	end

	function val_is_intrinsically_negative(val)
		if type(val) == "number" then
			return val < 0
		end

		return false
	end

	for stat, gr in spairs(value, sort_by_index) do
		-- get stat value
		local val_a = utils_ui.utils_ui.get_stats_value(obj, sec, gr, stat)
		local val_a_is_empty = val_is_empty(val_a)
		local val_a_is_negative = val_is_intrinsically_negative(val_a)

		if not val_a then
			goto continue
		end

		if not (gr.show_always or ((not gr.show_always) and not val_a_is_empty)) then
			goto continue
		end

		cnt = cnt + 1
		local ele = self.stats[cnt]

		-- Set up icon
		local icon_p = gr.icon_p
		local icon_n = (gr.icon_n ~= "") and gr.icon_n or icon_p
		local icon = val_a_is_negative and icon_n or icon_p

		if gr.sign_inverse then
			icon = val_a_is_negative and icon_p or icon_n
		end

		ele.icon:InitTexture(icon)

		-- Set up name
		ele.cap:SetText(game.translate_string(gr.name))

		-- Reset
		ele.bar2:Show(false)
		ele.bar1:Show(false)
		ele.txt:Show(false)
		ele.comp:Show(false)

		-- Text value
		if ele.txt then
			-- This routine allows for both numeric and text (pre-formatted) values.

			if type(val_a) == "number" then
				-- Numeric value, use existing routine to format and display.
				local valbar_a = math.floor(val_a * gr.magnitude)
				local unit = gr.unit and gr.unit ~= "" and game.translate_string(gr.unit) or ""
				local clr = valbar_a >= 0 and clr_list["p1"] or clr_list["n1"]

				valbar_a = math.ceil(valbar_a)

				if gr.sign_inverse then
					clr = valbar_a < 0 and clr_list["p1"] or clr_list["n1"]
					--valbar_a = -1 * valbar_a -- invert sign again if needed
				end

				local sign = gr.sign and valbar_a > 0 and "+" or ""

				-- Comparison item
				local val_b = obj_b and utils_ui.get_stats_value(obj_b, obj_b:section(), gr, stat)
				local valbar_b = val_b and math.floor(val_b * gr.magnitude)

				if valbar_b and (valbar_a ~= valbar_b) then
					local diff_val = math.ceil(valbar_a - valbar_b)
					-- â€¦

					ele.comp:SetText("(" .. (diff_val > 0 and "+" or "") .. diff_val .. ")")
					ele.comp:Show(true)
					clr = (valbar_a > valbar_b) and clr_list["info_p_txt"] or clr_list["info_n_txt"]
				end

				if gr.sign_inverse_txt then
					if valbar_a > 0 then
						sign = "-"
					elseif valbar_a < 0 then
						valbar_a = -1 * valbar_a
						sign = "+"
					end
				end

				local valbar_a_formatted = ""
				local unit_is_time = string.find(gr.unit or "", "ui_inv_seconds") ~= nil

				if unit_is_time then
					valbar_a_formatted = prop_formatted_time(valbar_a)
				else
					valbar_a_formatted = sign .. prop_formatted_number(valbar_a) .. " " .. unit
				end

				ele.txt:SetText(valbar_a_formatted)
				ele.txt:SetTextColor(clr)
				ele.txt:Show(true)
			else
				-- Text value (or none), assume value is already formatted, use as-is.
				local clr = gr.sign_inverse and clr_list["n1"] or clr_list["p1"]
				local unit = gr.unit and gr.unit ~= "" and game.translate_string(gr.unit) or ""
				local sign = gr.sign and (gr.sign_inverse and "-" or "+") or ""

				val_a = val_a or "(None)"

				ele.txt:SetText(sign .. val_a .. " " .. unit)
				ele.txt:SetTextColor(clr)
				ele.txt:Show(true)
			end
		elseif gr.track then
			val_a = tonumber(val_a) or 0 -- This routine assumes numeric value, force convert to prevent crashes.
			local valbar_a = clamp((math.floor(math.abs(val_a) * gr.magnitude)), 0, 1)

			-- Comparison item
			local val_b = obj_b and utils_ui.get_stats_value(obj_b, obj_b:section(), gr, stat)
			val_b = tonumber(val_b) or 0 -- This routine assumes numeric value, force convert to prevent crashes.
			local valbar_b = val_b and clamp((math.floor(math.abs(val_b) * gr.magnitude)), 0, 1)

			if valbar_b and (valbar_a ~= valbar_b) then
				-- If focussed item's value is bigger than slot item's value -> focued item's bar: green + 2nd layer
				if valbar_a > valbar_b then
					ele.bar1:SetProgressPos(valbar_b)
					ele.bar1:SetColor(clr_list["info_def"])

					ele.bar2:SetProgressPos(valbar_a)
					ele.bar2:SetColor(clr_list["info_p"])

					ele.comp:SetTextColor(clr_list["info_p_txt"])

					-- If focussed item's value is smaller than slot item's value -> focued item's bar: red + 1nd layer
				else
					ele.bar1:SetProgressPos(valbar_a)
					ele.bar1:SetColor(clr_list["info_def"])

					ele.bar2:SetProgressPos(valbar_b)
					ele.bar2:SetColor(clr_list["info_n"])

					ele.comp:SetTextColor(clr_list["info_n_txt"])
				end

				local diff_val = math.ceil((valbar_a - valbar_b) * 100)
				ele.comp:SetText((diff_val > 0 and "+" or "") .. diff_val .. "%")
				ele.comp:Show(true)
				ele.bar1:Show(true)
				ele.bar2:Show(true)
				ele.bar1:ShowBackground(false)
			else
				-- No comparison
				ele.bar1:SetProgressPos(valbar_a)
				ele.bar1:SetColor(clr_list["info_def"])
				ele.bar1:Show(true)
				ele.bar1:ShowBackground(true)
			end
		end

		y = y + ele.base:GetHeight()
		--printf("stat ele [%s] [%s] | cnt: %s - y: %s - value: %s", sec, stat, cnt, y, val_a)

		local ele_prev = cnt_last and self.stats[cnt_last]
		self:Sync_Y(ele_prev and ele_prev.base, ele.base, 0)
		cnt_last = cnt

		ele.base:Show(true)

		::continue::
	end

	self.stats_dialog:SetWndSize(vector2():set(self.stats_dialog:GetWidth(), y + 10))
	self.stats_dialog:Show(true)

	-- Stop here?
	if self:Sync_Finale((section_type ~= "weapon"), self.desc, self.stats_dialog, self.frame, 10) then
		self.ammo:Show(false)
		return
	end

	-- Ammo type
	if (section_type == "weapon") then
		local ammo_list = utils_item.get_ammo(sec, self.id, nil)
		local ammo_name = ini_sys:r_string_ex(ammo_list[1], "inv_name_short") or ""

		self.ammo_txt:SetText(game.translate_string(ammo_name))

		for i = 1, 12 do
			if self.ammo_ico[i] then
				if ammo_list[i] and (ammo_list[i] ~= "ammo_12x70_buck_self") then
					utils_xml.set_icon(ammo_list[i], nil, self.ammo_ico[i], self.ammo_ico_temp[i])
					self.ammo_ico[i]:Show(true)
					self.ammo_ico_temp[i]:Show(true)
				else
					self.ammo_ico[i]:Show(false)
					self.ammo_ico_temp[i]:Show(false)
				end
			end
		end

		self.ammo:Show(true)
	else
		self.ammo:Show(false)
	end

	-- Finale
	self:Sync_Finale(true, self.stats_dialog, self.ammo, self.frame, 10)
end

-- Utility

-- Numeric value formatting with thousands separator, supporting both integers and floats.
-- Examples, input 200 -> 200, 1000 -> 1.000, 2250000 -> 2.250.000, 1250.50 -> 1.250,50
function prop_formatted_number(val)
	if type(val) ~= "number" then
		return val
	end

	local formatted = string.format("%d", val)
	local k = 1

	while k > 0 do
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1.%2')
	end

	return formatted
end

-- Formats a time value given in seconds into a human-readable format (seconds, minutes).
-- Uses localized unit descriptions `ui_inv_seconds` and `ui_inv_minutes`.
function prop_formatted_time(val)
	if type(val) ~= "number" then
		return val
	end

	local formatted = ""
	local seconds = val % 60
	local minutes = math.floor(val / 60) % 60

	if minutes > 1 then
		formatted = minutes .. " " .. game.translate_string("ui_inv_minutes")
	elseif seconds > 1 then
		formatted = seconds .. " " .. game.translate_string("ui_inv_seconds")
	else
		formatted = game.translate_string("ui_inv_time_instant")
	end

	return formatted
end
